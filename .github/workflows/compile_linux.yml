on:
    push:
        branches: [ master ]
        paths-ignore:
        - '**/README.md'
        - '**/docs/**'
        - '**/release_windows.yml'
    pull_request:
        branches: [ master ]

name: Build on Linux
jobs:
    build-linux:
        runs-on: ubuntu-20.04
        strategy:
          fail-fast: false
          matrix:
            language: [ 'cpp' ]

        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                submodules: 'true'

            - name: Install Qt
              uses: jurplel/install-qt-action@v2
              with:
                version: '5.15.2'

            - name: Install other build dependencies
              run: 'sudo apt-get install libx11-dev libxi-dev fuse imagemagick libgstreamer-plugins-base1.0-0 libxcb-xinerama0 libxcb-render-util0 libxcb-randr0 libxcb-keysyms1 libxcb-image0 libxcb-icccm4'
            
            # Initializes the CodeQL tools for scanning.
            #- name: Initialize CodeQL
            #  uses: github/codeql-action/init@v1
            #  with:
            #    languages: ${{ matrix.language }}

            - name: Compile
              run: 'mkdir build && cd build && cmake .. && make'

            #- name: Start SSH via Ngrok
            #  run: curl -sL https://gist.githubusercontent.com/retyui/7115bb6acf151351a143ec8f96a7c561/raw/7099b9db76729dc5761da72aa8525f632d8875c9/debug-github-actions.sh | bash
            #  env:
            #    NGROK_TOKEN: ${{secrets.NGROK}}
            #    USER_PASS: test
            
            #- name: Don't kill instace
            #  run: sleep 1h # Prevent to killing instance after failure

            #- name: Perform CodeQL Analysis
            #  uses: github/codeql-action/analyze@v1

            - name: Create AppImage - Copy necessary files (1/2)
              run: 'mkdir -p AppDir/usr/lib/qt/plugins && cp -r Qt/5.15.2/gcc_64/qml/ AppDir/usr/lib/qt/ && cp -r Qt/5.15.2/gcc_64/lib/ AppDir/usr/lib/ && cp -r Qt/5.15.2/gcc_64/plugins/{xcbglintegrations,iconengines,platforms,xcbglintegrations}/ AppDir/usr/lib/qt/plugins'

            - name: Create AppImage - Copy necessary files (1/2)
              run: 'cp src/soundux.desktop . && cp buid/soundux . && mv icon.png soundux.png && mogrify -resize 256x256 soundux.png'

            #- name: List Qt Plugins
            #  run: 'ls qt/Qt/5.15.2/gcc_64/plugins && echo ''Qt Libs:'' && ls qt/Qt/5.15.2/gcc_64/lib'

            - name: Create AppImage - Download Linuxdeploy
              run: 'cd AppImage && wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage && chmod a+x linuxdeploy-x86_64.AppImage'

            - name: Create AppImage - Run LinuxDeploy
              run: 'cd AppImage && ./linuxdeploy-x86_64.AppImage --executable=soundux --icon-file=soundux.png --desktop-file=soundux.desktop --appdir AppDir --output appimage'

            - name: Upload AppImage Artifact
              uses: actions/upload-artifact@v2.2.1
              with:
                  name: AppImage
                  path: 'AppImage/*Soundux*.AppImage'
